{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39f9e510-8249-48f6-83b8-a676c7b9aa96",
   "metadata": {},
   "outputs": [],
   "source": [
    "import dash\n",
    "from dash import dcc, html\n",
    "import plotly.express as px\n",
    "import pandas as pd\n",
    "import plotly.io as pio\n",
    "\n",
    "# Charger les données depuis GitHub\n",
    "data_path = \"https://github.com/tolletg/Dash_Cabouy/blob/main/Cabouy_Interpolated.xlsx\"\n",
    "data = pd.read_excel(data_path)\n",
    "\n",
    "# Nettoyage des noms de colonnes\n",
    "data.columns = [col.strip().replace(\" \", \"_\") for col in data.columns]\n",
    "\n",
    "# Exclure DATE et Conductivité_Moyenne_Mobile\n",
    "excluded_columns = [\"DATE\", \"Conductivité_Moyenne_Mobile\"]\n",
    "parametres = [col for col in data.columns if col not in excluded_columns and not col.startswith(\"Statut_\")]\n",
    "\n",
    "# Créer l'application Dash\n",
    "app = dash.Dash(__name__)\n",
    "\n",
    "# Mise en page de l'application\n",
    "app.layout = html.Div([\n",
    "    html.H1(\"Visualisation des Données Hydrologiques de la station de Cabouy \"),\n",
    "    dcc.Dropdown(\n",
    "        id=\"param-dropdown\",\n",
    "        options=[{\"label\": param, \"value\": param} for param in parametres],\n",
    "        value=\"Niveau_(cm)\"  # Valeur par défaut\n",
    "    ),\n",
    "    dcc.Graph(id=\"graph\"),\n",
    "    html.Div(id=\"error-message\", style={\"color\": \"red\", \"font-weight\": \"bold\"})\n",
    "])\n",
    "\n",
    "# Callback pour mettre à jour le graphique\n",
    "@app.callback(\n",
    "    [dash.dependencies.Output(\"graph\", \"figure\"),\n",
    "     dash.dependencies.Output(\"error-message\", \"children\")],\n",
    "    [dash.dependencies.Input(\"param-dropdown\", \"value\")]\n",
    ")\n",
    "def update_graph(param):\n",
    "    if param not in data.columns:\n",
    "        return {\"data\": [], \"layout\": {\"title\": f\"❌ Erreur : {param} non trouvé\"}}, f\"⚠️ Erreur : {param} non trouvé.\"\n",
    "\n",
    "    # Ajouter une colonne de statut (si elle existe dans les données)\n",
    "    statut_col = \"Statut_\" + param if \"Statut_\" + param in data.columns else None\n",
    "\n",
    "    # Convertir en numérique\n",
    "    data[param] = pd.to_numeric(data[param], errors='coerce')\n",
    "\n",
    "    # Création du graphique interactif\n",
    "    fig = px.scatter(\n",
    "        data,\n",
    "        x=\"DATE\",\n",
    "        y=param,\n",
    "        color=statut_col,  # Utiliser la colonne statut\n",
    "        title=f\"Evolution du paramètre : {param}\",\n",
    "        labels={param: param, \"DATE\": \"Date\"},\n",
    "    )\n",
    "\n",
    "    # Ajustement dynamique de l'axe Y\n",
    "    fig.update_layout(yaxis=dict(range=[data[param].min(), data[param].max()]))\n",
    "\n",
    "    # Retourner le graphique et le message d'erreur\n",
    "    return fig, \"\"\n",
    "\n",
    "# Lancer l'application sur Render\n",
    "if __name__ == \"__main__\":\n",
    "    app.run_server(debug=False, host='0.0.0.0', port=8080)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
